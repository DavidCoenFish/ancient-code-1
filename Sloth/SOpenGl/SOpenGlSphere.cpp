//file: Sloth/SOpenGl/SOpenGlSphere.cpp

#include "Sloth/SlothPreCompileHeader.h"
#include "Sloth/SOpenGl/SOpenGlSphere.h"

#include< windows.h >
#include< gl/gl.h >
#include< gl/glu.h >
#include< OpenGl/glext.h >

/////////////////////////////////////////////////////////////////
// using
/**/
using namespace Hubris;
using namespace Sloth;

/////////////////////////////////////////////////////////////////
// local static variables
/**/
static const GLfloat s_sphereArrayVertexNormal[] = 
{
	0.000000f, 	0.000000f, 	1.000000f,
	-0.160622f, 	-0.221077f, 	0.961938f,
	-0.309017f, 	-0.425325f, 	0.850651f,
	-0.433889f, 	-0.597196f, 	0.674609f,
	-0.525731f, 	-0.723607f, 	0.447214f,
	-0.433889f, 	-0.870463f, 	0.232454f,
	-0.309017f, 	-0.951057f, 	0.000000f,
	-0.160622f, 	-0.959253f, 	-0.232454f,
	0.000000f, 	-0.894427f, 	-0.447214f,
	-0.259892f, 	0.084444f, 	0.961938f,
	-0.425325f, 	-0.138197f, 	0.894427f,
	-0.587785f, 	-0.361803f, 	0.723607f,
	-0.693780f, 	-0.512752f, 	0.505721f,
	-0.693780f, 	-0.681640f, 	0.232454f,
	-0.587785f, 	-0.809017f, 	0.000000f,
	-0.425325f, 	-0.861803f, 	-0.276393f,
	-0.259892f, 	-0.822619f, 	-0.505721f,
	0.000000f, 	-0.738175f, 	-0.674609f,
	-0.500000f, 	0.162460f, 	0.850651f,
	-0.688191f, 	-0.052786f, 	0.723607f,
	-0.809017f, 	-0.262866f, 	0.525731f,
	-0.850651f, 	-0.447214f, 	0.276393f,
	-0.809017f, 	-0.587785f, 	0.000000f,
	-0.688191f, 	-0.670820f, 	-0.276393f,
	-0.500000f, 	-0.688191f, 	-0.525731f,
	-0.262866f, 	-0.638197f, 	-0.723607f,
	0.000000f, 	-0.525731f, 	-0.850651f,
	-0.702046f, 	0.228109f, 	0.674609f,
	-0.862668f, 	0.007031f, 	0.505721f,
	-0.951057f, 	-0.138197f, 	0.276393f,
	-0.951056f, 	-0.309017f, 	0.000000f,
	-0.862668f, 	-0.449186f, 	-0.232454f,
	-0.702046f, 	-0.501375f, 	-0.505721f,
	-0.525731f, 	-0.447214f, 	-0.723607f,
	-0.262866f, 	-0.361803f, 	-0.894427f,
	0.000000f, 	-0.273267f, 	-0.961938f,
	-0.850651f, 	0.276393f, 	0.447214f,
	-0.961938f, 	0.143665f, 	0.232454f,
	-1.000000f, 	0.000000f, 	0.000000f,
	-0.961938f, 	-0.143665f, 	-0.232454f,
	-0.850651f, 	-0.276393f, 	-0.447214f,
	-0.702046f, 	-0.228109f, 	-0.674609f,
	-0.500000f, 	-0.162460f, 	-0.850651f,
	-0.259892f, 	-0.084444f, 	-0.961938f,
	0.000000f, 	0.000000f, 	-1.000000f,
	0.000000f, 	0.000000f, 	1.000000f,
	-0.259892f, 	0.084444f, 	0.961938f,
	-0.500000f, 	0.162460f, 	0.850651f,
	-0.702046f, 	0.228109f, 	0.674609f,
	-0.850651f, 	0.276393f, 	0.447214f,
	-0.961938f, 	0.143665f, 	0.232454f,
	-1.000000f, 	0.000000f, 	0.000000f,
	-0.961938f, 	-0.143665f, 	-0.232454f,
	-0.850651f, 	-0.276393f, 	-0.447214f,
	0.000000f, 	0.273267f, 	0.961938f,
	-0.262866f, 	0.361803f, 	0.894427f,
	-0.525731f, 	0.447214f, 	0.723607f,
	-0.702046f, 	0.501375f, 	0.505721f,
	-0.862668f, 	0.449186f, 	0.232454f,
	-0.951056f, 	0.309017f, 	0.000000f,
	-0.951057f, 	0.138197f, 	-0.276393f,
	-0.862668f, 	-0.007031f, 	-0.505721f,
	-0.702046f, 	-0.228109f, 	-0.674609f,
	0.000000f, 	0.525731f, 	0.850651f,
	-0.262866f, 	0.638197f, 	0.723607f,
	-0.500000f, 	0.688191f, 	0.525731f,
	-0.688191f, 	0.670820f, 	0.276393f,
	-0.809017f, 	0.587785f, 	0.000000f,
	-0.850651f, 	0.447214f, 	-0.276393f,
	-0.809017f, 	0.262866f, 	-0.525731f,
	-0.688191f, 	0.052786f, 	-0.723607f,
	-0.500000f, 	-0.162460f, 	-0.850651f,
	0.000000f, 	0.738175f, 	0.674609f,
	-0.259892f, 	0.822619f, 	0.505721f,
	-0.425325f, 	0.861803f, 	0.276393f,
	-0.587785f, 	0.809017f, 	0.000000f,
	-0.693780f, 	0.681640f, 	-0.232454f,
	-0.693780f, 	0.512752f, 	-0.505721f,
	-0.587785f, 	0.361803f, 	-0.723607f,
	-0.425325f, 	0.138197f, 	-0.894427f,
	-0.259892f, 	-0.084444f, 	-0.961938f,
	0.000000f, 	0.894427f, 	0.447214f,
	-0.160622f, 	0.959253f, 	0.232454f,
	-0.309017f, 	0.951057f, 	0.000000f,
	-0.433889f, 	0.870463f, 	-0.232454f,
	-0.525731f, 	0.723607f, 	-0.447214f,
	-0.433889f, 	0.597196f, 	-0.674609f,
	-0.309017f, 	0.425325f, 	-0.850651f,
	-0.160622f, 	0.221077f, 	-0.961938f,
	0.000000f, 	0.000000f, 	-1.000000f,
	0.000000f, 	0.000000f, 	1.000000f,
	0.000000f, 	0.273267f, 	0.961938f,
	0.000000f, 	0.525731f, 	0.850651f,
	0.000000f, 	0.738175f, 	0.674609f,
	0.000000f, 	0.894427f, 	0.447214f,
	-0.160622f, 	0.959253f, 	0.232454f,
	-0.309017f, 	0.951057f, 	0.000000f,
	-0.433889f, 	0.870463f, 	-0.232454f,
	-0.525731f, 	0.723607f, 	-0.447214f,
	0.259892f, 	0.084444f, 	0.961938f,
	0.262866f, 	0.361803f, 	0.894427f,
	0.262866f, 	0.638197f, 	0.723607f,
	0.259892f, 	0.822619f, 	0.505721f,
	0.160622f, 	0.959253f, 	0.232454f,
	0.000000f, 	1.000000f, 	0.000000f,
	-0.162460f, 	0.947214f, 	-0.276393f,
	-0.273267f, 	0.818274f, 	-0.505721f,
	-0.433889f, 	0.597196f, 	-0.674609f,
	0.500000f, 	0.162460f, 	0.850651f,
	0.525731f, 	0.447214f, 	0.723607f,
	0.500000f, 	0.688191f, 	0.525731f,
	0.425325f, 	0.861803f, 	0.276393f,
	0.309017f, 	0.951057f, 	0.000000f,
	0.162460f, 	0.947214f, 	-0.276393f,
	0.000000f, 	0.850651f, 	-0.525731f,
	-0.162460f, 	0.670820f, 	-0.723607f,
	-0.309017f, 	0.425325f, 	-0.850651f,
	0.702046f, 	0.228109f, 	0.674609f,
	0.702046f, 	0.501375f, 	0.505721f,
	0.688191f, 	0.670820f, 	0.276393f,
	0.587785f, 	0.809017f, 	0.000000f,
	0.433889f, 	0.870463f, 	-0.232454f,
	0.273267f, 	0.818274f, 	-0.505721f,
	0.162460f, 	0.670820f, 	-0.723607f,
	0.000000f, 	0.447214f, 	-0.894427f,
	-0.160622f, 	0.221077f, 	-0.961938f,
	0.850651f, 	0.276393f, 	0.447214f,
	0.862668f, 	0.449186f, 	0.232454f,
	0.809017f, 	0.587785f, 	0.000000f,
	0.693780f, 	0.681640f, 	-0.232454f,
	0.525731f, 	0.723607f, 	-0.447214f,
	0.433889f, 	0.597196f, 	-0.674609f,
	0.309017f, 	0.425325f, 	-0.850651f,
	0.160622f, 	0.221077f, 	-0.961938f,
	0.000000f, 	0.000000f, 	-1.000000f,
	0.000000f, 	0.000000f, 	1.000000f,
	0.259892f, 	0.084444f, 	0.961938f,
	0.500000f, 	0.162460f, 	0.850651f,
	0.702046f, 	0.228109f, 	0.674609f,
	0.850651f, 	0.276393f, 	0.447214f,
	0.862668f, 	0.449186f, 	0.232454f,
	0.809017f, 	0.587785f, 	0.000000f,
	0.693780f, 	0.681640f, 	-0.232454f,
	0.525731f, 	0.723607f, 	-0.447214f,
	0.160622f, 	-0.221077f, 	0.961938f,
	0.425325f, 	-0.138197f, 	0.894427f,
	0.688191f, 	-0.052786f, 	0.723607f,
	0.862668f, 	0.007031f, 	0.505721f,
	0.961938f, 	0.143665f, 	0.232454f,
	0.951056f, 	0.309017f, 	0.000000f,
	0.850651f, 	0.447214f, 	-0.276393f,
	0.693780f, 	0.512752f, 	-0.505721f,
	0.433889f, 	0.597196f, 	-0.674609f,
	0.309017f, 	-0.425325f, 	0.850651f,
	0.587785f, 	-0.361803f, 	0.723607f,
	0.809017f, 	-0.262866f, 	0.525731f,
	0.951057f, 	-0.138197f, 	0.276393f,
	1.000000f, 	0.000000f, 	0.000000f,
	0.951057f, 	0.138197f, 	-0.276393f,
	0.809017f, 	0.262866f, 	-0.525731f,
	0.587785f, 	0.361803f, 	-0.723607f,
	0.309017f, 	0.425325f, 	-0.850651f,
	0.433889f, 	-0.597196f, 	0.674609f,
	0.693780f, 	-0.512752f, 	0.505721f,
	0.850651f, 	-0.447214f, 	0.276393f,
	0.951056f, 	-0.309017f, 	0.000000f,
	0.961938f, 	-0.143665f, 	-0.232454f,
	0.862668f, 	-0.007031f, 	-0.505721f,
	0.688191f, 	0.052786f, 	-0.723607f,
	0.425325f, 	0.138197f, 	-0.894427f,
	0.160622f, 	0.221077f, 	-0.961938f,
	0.525731f, 	-0.723607f, 	0.447214f,
	0.693780f, 	-0.681640f, 	0.232454f,
	0.809017f, 	-0.587785f, 	0.000000f,
	0.862668f, 	-0.449186f, 	-0.232454f,
	0.850651f, 	-0.276393f, 	-0.447214f,
	0.702046f, 	-0.228109f, 	-0.674609f,
	0.500000f, 	-0.162460f, 	-0.850651f,
	0.259892f, 	-0.084444f, 	-0.961938f,
	0.000000f, 	0.000000f, 	-1.000000f,
	0.000000f, 	0.000000f, 	1.000000f,
	0.160622f, 	-0.221077f, 	0.961938f,
	0.309017f, 	-0.425325f, 	0.850651f,
	0.433889f, 	-0.597196f, 	0.674609f,
	0.525731f, 	-0.723607f, 	0.447214f,
	0.693780f, 	-0.681640f, 	0.232454f,
	0.809017f, 	-0.587785f, 	0.000000f,
	0.862668f, 	-0.449186f, 	-0.232454f,
	0.850651f, 	-0.276393f, 	-0.447214f,
	-0.160622f, 	-0.221077f, 	0.961938f,
	0.000000f, 	-0.447214f, 	0.894427f,
	0.162460f, 	-0.670820f, 	0.723607f,
	0.273267f, 	-0.818274f, 	0.505721f,
	0.433889f, 	-0.870463f, 	0.232454f,
	0.587785f, 	-0.809017f, 	0.000000f,
	0.688191f, 	-0.670820f, 	-0.276393f,
	0.702046f, 	-0.501375f, 	-0.505721f,
	0.702046f, 	-0.228109f, 	-0.674609f,
	-0.309017f, 	-0.425325f, 	0.850651f,
	-0.162460f, 	-0.670820f, 	0.723607f,
	0.000000f, 	-0.850651f, 	0.525731f,
	0.162460f, 	-0.947214f, 	0.276393f,
	0.309017f, 	-0.951057f, 	0.000000f,
	0.425325f, 	-0.861803f, 	-0.276393f,
	0.500000f, 	-0.688191f, 	-0.525731f,
	0.525731f, 	-0.447214f, 	-0.723607f,
	0.500000f, 	-0.162460f, 	-0.850651f,
	-0.433889f, 	-0.597196f, 	0.674609f,
	-0.273267f, 	-0.818274f, 	0.505721f,
	-0.162460f, 	-0.947214f, 	0.276393f,
	0.000000f, 	-1.000000f, 	0.000000f,
	0.160622f, 	-0.959253f, 	-0.232454f,
	0.259892f, 	-0.822619f, 	-0.505721f,
	0.262866f, 	-0.638197f, 	-0.723607f,
	0.262866f, 	-0.361803f, 	-0.894427f,
	0.259892f, 	-0.084444f, 	-0.961938f,
	-0.525731f, 	-0.723607f, 	0.447214f,
	-0.433889f, 	-0.870463f, 	0.232454f,
	-0.309017f, 	-0.951057f, 	0.000000f,
	-0.160622f, 	-0.959253f, 	-0.232454f,
	0.000000f, 	-0.894427f, 	-0.447214f,
	0.000000f, 	-0.738175f, 	-0.674609f,
	0.000000f, 	-0.525731f, 	-0.850651f,
	0.000000f, 	-0.273267f, 	-0.961938f,
	0.000000f, 	0.000000f, 	-1.000000f
};

static const GLint s_sphereArrayVertexNormalSize = HCOMMON_ARRAY_SIZE( s_sphereArrayVertexNormal );

static const GLushort s_sphereArrayVertexIndex[] =
{
	0,	9,
	1,	10,
	2,	11,
	3,	12,
	4,	13,
	5,	14,
	6,	15,
	7,	16,
	8,	17,
	9,	18,
	10,	19,
	11,	20,
	12,	21,
	13,	22,
	14,	23,
	15,	24,
	16,	25,
	17,	26,
	18,	27,
	19,	28,
	20,	29,
	21,	30,
	22,	31,
	23,	32,
	24,	33,
	25,	34,
	26,	35,
	27,	36,
	28,	37,
	29,	38,
	30,	39,
	31,	40,
	32,	41,
	33,	42,
	34,	43,
	35,	44,
	45,	54,
	46,	55,
	47,	56,
	48,	57,
	49,	58,
	50,	59,
	51,	60,
	52,	61,
	53,	62,
	54,	63,
	55,	64,
	56,	65,
	57,	66,
	58,	67,
	59,	68,
	60,	69,
	61,	70,
	62,	71,
	63,	72,
	64,	73,
	65,	74,
	66,	75,
	67,	76,
	68,	77,
	69,	78,
	70,	79,
	71,	80,
	72,	81,
	73,	82,
	74,	83,
	75,	84,
	76,	85,
	77,	86,
	78,	87,
	79,	88,
	80,	89,
	90,	99,
	91,	100,
	92,	101,
	93,	102,
	94,	103,
	95,	104,
	96,	105,
	97,	106,
	98,	107,
	99,	108,
	100,	109,
	101,	110,
	102,	111,
	103,	112,
	104,	113,
	105,	114,
	106,	115,
	107,	116,
	108,	117,
	109,	118,
	110,	119,
	111,	120,
	112,	121,
	113,	122,
	114,	123,
	115,	124,
	116,	125,
	117,	126,
	118,	127,
	119,	128,
	120,	129,
	121,	130,
	122,	131,
	123,	132,
	124,	133,
	125,	134,
	135,	144,
	136,	145,
	137,	146,
	138,	147,
	139,	148,
	140,	149,
	141,	150,
	142,	151,
	143,	152,
	144,	153,
	145,	154,
	146,	155,
	147,	156,
	148,	157,
	149,	158,
	150,	159,
	151,	160,
	152,	161,
	153,	162,
	154,	163,
	155,	164,
	156,	165,
	157,	166,
	158,	167,
	159,	168,
	160,	169,
	161,	170,
	162,	171,
	163,	172,
	164,	173,
	165,	174,
	166,	175,
	167,	176,
	168,	177,
	169,	178,
	170,	179,
	180,	189,
	181,	190,
	182,	191,
	183,	192,
	184,	193,
	185,	194,
	186,	195,
	187,	196,
	188,	197,
	189,	198,
	190,	199,
	191,	200,
	192,	201,
	193,	202,
	194,	203,
	195,	204,
	196,	205,
	197,	206,
	198,	207,
	199,	208,
	200,	209,
	201,	210,
	202,	211,
	203,	212,
	204,	213,
	205,	214,
	206,	215,
	207,	216,
	208,	217,
	209,	218,
	210,	219,
	211,	220,
	212,	221,
	213,	222,
	214,	223,
	215,	224
};

static const GLint s_sphereArrayVertexIndexSize = HCOMMON_ARRAY_SIZE( s_sphereArrayVertexIndex );

///////////////////////////////////////////////////////
// static public methods
/**/
static HVOID LocalInitSphereDisplayList(
	const Hubris::HSINT in_sphereDisplayList
	)
{
	if( glIsList( in_sphereDisplayList ) )
	{
		return;
	}

	glNewList( in_sphereDisplayList, GL_COMPILE );

	HSINT trace = 0;
	for( HSINT index = 0; index < 20; ++index )
	{
		glBegin( GL_TRIANGLE_STRIP );
		for( HSINT subIndex = 0; subIndex < 18; ++subIndex )
		{
			const HSINT vertexIndex = s_sphereArrayVertexIndex[ trace ] * 3;

			glNormal3fv( &s_sphereArrayVertexNormal[ vertexIndex ] );
			glVertex3fv( &s_sphereArrayVertexNormal[ vertexIndex ] );

			trace += 1;
		}
		glEnd();
	}

	glEndList();

	return;
}

///////////////////////////////////////////////////////
// static public methods
/**/
Hubris::HVOID SOpenGlSphere::DrawSphere(
	const Hubris::HREAL in_radius,
	const Hubris::HSINT in_sphereDisplayList
	)
{
	if( HMathUtility::EpsilonZero( in_radius ) )
	{
		return;
	}

	LocalInitSphereDisplayList( in_sphereDisplayList );

	glScalef(
		in_radius,
		in_radius,
		in_radius
		);

	glCallList( in_sphereDisplayList );

	const HREAL invertRadius = 1.0F / in_radius;
	glScalef(
		invertRadius,
		invertRadius,
		invertRadius
		);

	return;
}

/*
{
	glPushClientAttrib( GL_CLIENT_VERTEX_ARRAY_BIT );
	glEnableClientState( GL_VERTEX_ARRAY );
	glEnableClientState( GL_NORMAL_ARRAY );

	glMatrixMode( GL_MODELVIEW );
	glLoadIdentity();
	const HVectorR3 center = in_sphere.CenterGet();
	glTranslatef( 
		center[ 0 ],
		center[ 1 ],
		center[ 2 ]
		);
	const HREAL radius = in_sphere.RadiusGet();
	glScalef(
		radius,
		radius,
		radius
		);

	glVertexPointer( 3, GL_FLOAT, 0, s_sphereArrayVertexNormal );
	glNormalPointer( GL_FLOAT, 0, s_sphereArrayVertexNormal );
	for( HSINT index = 0; index < 20; ++index )
	{
		glDrawElements( 
			GL_TRIANGLE_STRIP, 
			18,
			GL_UNSIGNED_SHORT, 
			&s_sphereArrayVertexIndex[ index * 18 ]
			);
	}

	glPopClientAttrib();

	return;
}

/**/
