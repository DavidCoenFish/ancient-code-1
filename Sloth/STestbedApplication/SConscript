#file: Coretech/Code/Sloth/STestbedApplication/SConscript


###########################################
# import

import os

Import( "env" )
env = env.Clone()


###########################################
# local varaibles

translationUnitName = 'STestbedApplication'
translationUnitProjectName = translationUnitName + env['MSVSPROJECTSUFFIX']
translationUnitSolutionName = translationUnitName + env['MSVSSOLUTIONSUFFIX']

#src files  
sourceFileDict = {
  'DATA' : [
    'Data/vertex_shader.txt',
    'Data/vertex_shader_lights.txt',
    ],
  '' : [
    'STestbedApplication.cpp',
    'STestbedApplication.h',
    'SConscript'
    ],
  }

######################################
#adjust our env

if env.get( 'TARGET_DEBUG', False ):
  env[ 'PDB' ] = translationUnitName + '.pdb'

env.Append( TARGET_DEFINES = [ '_CONSOLE' ] )

######################################
#build exe alias( 'build' )

build = env.BuildMsvs(
  target = translationUnitName + '.exe',
  source = [ 
    translationUnitSolutionName,
    "${BUILD_DIR}/Code/Lib/Hubris.Lib",
    "${BUILD_DIR}/Code/Lib/Pride.Lib",
    "${BUILD_DIR}/Code/Lib/Sloth.Lib",
    "${BUILD_DIR}/Code/Lib/Lust.Lib",
    ],
  sourceFile = env.File( '#Code/Sloth/STestbedApplication/' + translationUnitSolutionName ),
  projectName = translationUnitName,
  )  
env.Alias( 'build', build )

######################################
#build project

if 'CreateMsvsProject' in env['TOOLS']:
  project = env.CreateMsvsProject(
    target = translationUnitProjectName,
    source = [
      env.File( '${CODE_DIR}/Sloth/STestbedApplication/Sconscript' ),
      ],     
    sourceProjectFiles = sourceFileDict,
    additionalIncludeDirectories = [ "..\\..", ],    
    additionalDependencies = [ 
      "Hubris.lib", 
      "Envy.lib",
      "Pride.lib",
      "Sloth.lib",
      "Lust.lib",
      "TinyXml.lib",
      "opengl32.lib",
      ],
    additionalLibraryDirectories = [ 
      env.Dir( '${BUILD_DIR}/Code/Lib' ).abspath,
      env.Dir( '${BUILD_DIR}/ThirdParty/Lib' ).abspath,
      ],
    projectType = 'Win32Proj',
    buildWindowApp = True,
    buildBase = os.path.join( "..", "..", "..", env.Dir( '.' ).path ),
    )
  Clean( project, env.File( translationUnitProjectName ).srcnode() )
  env.Default( project )

######################################
#build solution (default)

if 'CreateMsvsSolution' in env['TOOLS']:
  solution = env.CreateMsvsSolution(
    target = translationUnitSolutionName,
    source = [
      translationUnitProjectName,
      ],
    sourceSolutionDependency = { 
      translationUnitProjectName : [
        "Hubris.vcproj",
        "Envy.vcproj",
        "Pride.vcproj",
        "Lust.vcproj",
        "Sloth.vcproj",
        ],
        
      "..\\..\\Hubris\\Hubris.vcproj" : [
        "TinyXml.vcproj",
        ],
        
      "..\\..\\Envy\\Envy.vcproj" : [
        ],
        
      "..\\..\\Pride\\Pride.vcproj" : [
        ],

      "..\\..\\Lust\\Lust.vcproj" : [
        ],

      "..\\Sloth.vcproj" : [
        ],
        
      "..\\..\\..\\ThirdParty\\TinyXml\\TinyXml.vcproj" : [
        ],        
      },
    solutionItemArray = [
      "SConscript",
      "..\\..\\..\\SolutionItems\\code_standard.txt",   
      "..\\..\\..\\SolutionItems\\todo.txt",   
      "..\\..\\..\\SolutionItems\\plan.txt",  
      "..\\..\\..\\SolutionItems\\glsl_vertex_shader_quick_ref.txt",    
      ],

    )
  env.Clean( solution, env.File( translationUnitSolutionName ).srcnode() )  
  env.Default( solution )
        
#end file