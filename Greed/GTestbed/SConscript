#file: Coretech/Code/Greed/GTestbed/SConscript


###########################################
# import

import os

Import( "env" )
env = env.Clone()


###########################################
# local varaibles

translationUnitName = 'GTestbed'
translationUnitProjectName = translationUnitName + env['MSVSPROJECTSUFFIX']
translationUnitSolutionName = translationUnitName + env['MSVSSOLUTIONSUFFIX']

#src files  
sourceFileDict = {
  'Private' : [
    ],
  '' : [
    'GTestbed_Import.h',
    'GTestbed.cpp',
    'GTestbed.h',
    'SConscript'
    ],
  }

######################################
#adjust our env

#env.Append( CCFLAGS = '/EHsc' )
#env.AppendUnique( TARGET_DEFINES = [ ( "_HAS_EXCEPTIONS", "1" ) ] )

if env.get( 'TARGET_DEBUG', False ):
  env[ 'PDB' ] = translationUnitName + '.pdb'

env.Append( TARGET_DEFINES = [ '_CONSOLE' ] )

######################################
#build exe alias( 'build' )

build = env.BuildMsvs(
  target = translationUnitName + '.exe',
  source = [ 
    translationUnitSolutionName,
    env.File( "${BUILD_DIR}/Code/Lib/Hubris.Lib" ),  
    env.File( "${BUILD_DIR}/Code/Lib/Pride.Lib" ),  
    ],
  sourceFile = env.File( '#Code/Greed/GTestbed/' + translationUnitSolutionName ),
  projectName = translationUnitName,
  )  
env.Alias( 'build', build )


######################################
#run testbed exe alias( 'testbed' )

if 'RunTestbed' in env['TOOLS']:
  testbed = env.RunTestbed(
    target = translationUnitName + '.txt',
    source = translationUnitName + '.exe',
    )  
  env.Alias( 'testbed', testbed )

######################################
#build project

if 'CreateMsvsProject' in env['TOOLS']:
  project = env.CreateMsvsProject(
    target = translationUnitProjectName,
    source = [
      env.File( '${CODE_DIR}/Greed/GTestbed/Sconscript' ),
      ],         
    sourceProjectFiles = sourceFileDict,
    additionalIncludeDirectories = [ 
      "..\\..",
      ],    
      
    additionalDependencies = [ 
      "Hubris.lib", 
      "Envy.lib",
      "Pride.lib",
      "Lust.lib",
      "Greed.lib", 
      "TinyXml.lib",
      ],
    additionalLibraryDirectories = [ 
      env.Dir( '${BUILD_DIR}/Code/Lib' ).abspath,
      env.Dir( '${BUILD_DIR}/ThirdParty/Lib' ).abspath,
      ],
    projectType = 'Win32Proj',
    buildConsole = True,
    buildBase = os.path.join( "..", "..", "..", env.Dir( '.' ).path ),
    )
  Clean( project, env.File( translationUnitProjectName ).srcnode() )
  env.Default( project )

######################################
#build solution (default)

if 'CreateMsvsSolution' in env['TOOLS']:
  solution = env.CreateMsvsSolution(
    target = translationUnitSolutionName,
    source = [
      translationUnitProjectName,
      ],
    sourceSolutionDependency = { 
      translationUnitProjectName : [
        "Hubris.vcproj",
        "Envy.vcproj",
        "Pride.vcproj",
        "Vanity.vcproj",
        "Lust.vcproj",
        "Sloth.vcproj",
        "Greed.vcproj",
        ],
        
      "..\\..\\Hubris\\Hubris.vcproj" : [
        "TinyXml.vcproj",
        ],

      "..\\..\\Envy\\Envy.vcproj" : [
        ],

      "..\\..\\Pride\\Pride.vcproj" : [
        ],

      "..\\..\\Vanity\\Vanity.vcproj" : [
        ],

      "..\\..\\Lust\\Lust.vcproj" : [
        ],

      "..\\..\\Sloth\\Sloth.vcproj" : [
        ],
        
      "..\\Greed.vcproj" : [
        ],

      "..\\..\\..\\ThirdParty\\TinyXml\\TinyXml.vcproj" : [
        ],
        
      },
    solutionItemArray = [
      "SConscript",
      "..\\..\\..\\SolutionItems\\code_standard.txt",   
      "..\\..\\..\\SolutionItems\\todo.txt",   
      "..\\..\\..\\SolutionItems\\plan.txt",      
      ],

    )
  env.Clean( solution, env.File( translationUnitSolutionName ).srcnode() )  
  env.Default( solution )
        
#end file